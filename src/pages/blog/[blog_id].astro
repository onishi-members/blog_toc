---
import * as cheerio from 'cheerio';
import { getBlogs } from "../../libs/microcms.js";

export async function getStaticPaths() {
	const response = (await getBlogs({ fields: ["id", "title", "content", "insert_toc"] }))

	return response.contents.map((content) => ({
		params: {
			blog_id: content.id
		},
		props: { content }
	}))
}
const { content } = Astro.props

const cheerioDom = cheerio.load(content.content)
const headings = cheerioDom('h2, h3').toArray()
const toc = headings.map((data) => {
	return {
		id: data.attribs.id,
		text: cheerioDom(data).text(),
		tag: data.tagName,
	}
})

type TocItem = {
	id: string;
	text: string;
	tag: string;
};

type NestedTocItem = {
	id: string;
	text: string;
	tag: string;
	children: TocItem[];
};

// フラットなTOC配列を階層構造に変換する
// h2要素を親として、その直後のh3要素を子要素としてグループ化
function buildNestedToc(flatTocItems: TocItem[]): NestedTocItem[] {
	const hierarchicalToc: NestedTocItem[] = [];
	let currentH2Section: NestedTocItem | null = null;

	for (const tocItem of flatTocItems) {
		if (tocItem.tag === 'h2') {
			// 新しいh2セクションを作成
			currentH2Section = {
				id: tocItem.id,
				text: tocItem.text,
				tag: tocItem.tag,
				children: []
			};
			hierarchicalToc.push(currentH2Section);
		} else if (tocItem.tag === 'h3' && currentH2Section !== null) {
			// 現在のh2セクションにh3を追加
			currentH2Section.children.push(tocItem);
		}
		// h2がない状態でh3が来た場合は無視
	}

	return hierarchicalToc;
}

const nestedToc = buildNestedToc(toc);
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="viewport" content="width=device-width" />
		<meta name="generator" content={Astro.generator} />
		<title>Astro</title>
	</head>
	<body>
		<!-- TOC をリストとして表示 -->
		{content.insert_toc && (
			<nav>
				<p>目次</p>
				<ul>
					{nestedToc.map((item) => (
						item.tag === 'h2' ? (
							<li class="h2">
								<a href={`#${item.id}`}>{item.text}</a>
								{item.children && item.children.length > 0 && (
									<ul>
										{item.children.map((child) => (
											<li class="h3">
												<a href={`#${child.id}`}>{child.text}</a>
											</li>
										))}
									</ul>
								)}
							</li>
						) : (
							<li class="h3">
								<a href={`#${item.id}`}>{item.text}</a>
							</li>
						)
					))}
				</ul>
			</nav>
		)}
		<div set:html={content.content} />
	</body>
</html>

<style>
	body {
		max-width: 800px;
		margin: 0 auto;
		padding: 20px;
	}

	nav {
		background-color: #f9f9f9;
		border: 1px solid #ddd;
		padding: 15px;
		margin-bottom: 20px;
		border-radius: 5px;
	}

	nav p {
		font-size: 1.2em;
		font-weight: bold;
		margin-top: 0;
		margin-bottom: 10px;
	}

	ul {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	ul ul {
		padding-left: 20px;
		margin-top: 5px;
	}

	li.h2 {
		font-weight: bold;
		margin: 10px 0;
	}

	li.h3 {
		font-weight: normal;
		margin: 5px 0;
	}

	li a {
		text-decoration: none;
		color: #007acc;
	}

	li a:hover {
		text-decoration: underline;
	}
</style>
